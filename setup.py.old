#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""The setup script."""
from __future__ import print_function
from setuptools import setup, find_packages

import os
import sys
import subprocess
import imp

# Add the current directory to the module search path
sys.path.insert(0, os.path.abspath('.'))
#Constants
CODE_DIRECTORY = 'puticr'
DOCS_DIRECTORY = 'docs'
TESTS_DIRECTORY = 'tests'
PYTEST_FLAGS = ['--doctest-modules']

# Import metadata
metadata = imp.load_source(
        'metadata', os.path.join(CODE_DIRECTORY, 'metadata.py'))

with open('README.rst') as readme_file:
    readme = readme_file.read()

with open('HISTORY.rst') as history_file:
    history = history_file.read()

requirements = ['Click>=6.0', ]

setup_requirements = ['pytest-runner', ]

test_requirements = ['pytest', ]

setup(
    author="Dereje Jima",
    author_email='ddjima2014@gmail.com',
    classifiers=[
        'Development Status :: 2 - Pre-Alpha',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Natural Language :: English',
        "Programming Language :: Python :: 2",
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
    ],
    description="Program to idenentify putative imprint control region (ICR) from Whole genome methylation data.",
    entry_points={
        'console_scripts': [
            'puticr=puticr.main:main',
        ],
    },
    script = [
        'puticr/download/cgmaptools/cgmaptools'
        ],
    install_requires=requirements,
    license=metadata.license,
    long_description=readme + '\n\n' + history,
    include_package_data=True,
    keywords='puticr',
    name='puticr',
    packages=find_packages(include=['puticr']),
    setup_requires=setup_requirements,
    test_suite='tests',
    tests_require=test_requirements,
    url='https://github.com/demis001/puticr',
    version='0.1.0',
    zip_safe=False,
)
def runTasks():
    """ Run paver taks
    """
    cmd = "paver prepare"
    return subprocess.Popen(cmd, shell=True).communicate()
def main():
     #setup(**setup_dict)
     try:
         import paver.tasks
     except ImportError:
         if os.path.exists("paver-minilib.zip"):
             sys.path.insert(0, "paver-minilib.zip")
         else:
             raise ValueError("No paver in the path")
         import paver.tasks
     paver.tasks.main()
     runTasks()
if __name__ == '__main__':
     main()

